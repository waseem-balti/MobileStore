file directory tree is,
├── admin.py
├── apps.py
├── code.txt
├── forms.py
├── migrations
├── models.py
├── templates
│   ├── accessories.html
│   ├── accessory_detail.html
│   ├── base.html
│   ├── category_page.html
│   ├── create_accessory.html
│   ├── create_laptop.html
│   ├── create_mobile_phone.html
│   ├── create_profile.html
│   ├── form_error_template.html
│   ├── index.html
│   ├── laptops.html
│   ├── laptop_detail.html
│   ├── phones.html
│   ├── phone_detail.html
│   ├── registration
│   │   ├── login.html
│   │   ├── password_reset_confirm.html
│   │   ├── password_reset_email.html
│   │   ├── password_reset_form.html
│   │   └── signup.html
│   ├── store
│   │   ├── orders.html
│   │   └── order_detail.html
│   └── users
│       ├── password_change.html
│       ├── password_change_done.html
│       └── profile.html
├── templatetags
│   ├── custom_filters.py
│   ├── __init__.py
├── tests.py
├── urls.py
├── views.py



model.py,

from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.core.validators import FileExtensionValidator
import uuid
from datetime import datetime, timedelta
from django.db.models.signals import post_save
from django.dispatch import receiver

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    phone = models.CharField(max_length=15, blank=True)
    address = models.TextField(blank=True)
    bio = models.TextField(max_length=500, blank=True)

    def __str__(self):
        return f'{self.user.username} Profile'

    @receiver(post_save, sender=User)
    def create_user_profile(sender, instance, created, **kwargs):
        if created:
            Profile.objects.create(user=instance)

    @receiver(post_save, sender=User)
    def save_user_profile(sender, instance, **kwargs):
        instance.profile.save()


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()

class Address(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    street_address = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    state = models.CharField(max_length=100)
    country = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=20)

    def __str__(self):
        return f'{self.user.username} - {self.city}'

class PaymentMethod(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    card_number = models.CharField(max_length=16)
    expiry_date = models.CharField(max_length=5)  # MM/YY format
    cardholder_name = models.CharField(max_length=100)

    def __str__(self):
        return f'{self.user.username} - {self.card_number[-4:]}'

class Wishlist(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product_name = models.CharField(max_length=255)
    product_category = models.CharField(max_length=100)
    added_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'{self.user.username} - {self.product_name}'



class Order(models.Model):
    STATUS_CHOICES = [
        ('Pending', 'Pending'),
        ('Processing', 'Processing'),
        ('Shipped', 'Shipped'),
        ('Delivered', 'Delivered'),
        ('Cancelled', 'Cancelled'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    order_number = models.CharField(max_length=20, unique=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    shipping_address = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'Order {self.order_number}'

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey('store.Product', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f'{self.quantity} x {self.product.name}'
class PasswordResetToken(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    token = models.UUIDField(default=uuid.uuid4, editable=False)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField()
    is_used = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        if not self.expires_at:
            self.expires_at = datetime.now() + timedelta(hours=24)
        super().save(*args, **kwargs)

    @property
    def is_valid(self):
        return not self.is_used and datetime.now() < self.expires_at

# User roles for better management
class Role(models.TextChoices):
    SHOP_OWNER = "shop_owner", "Shop Owner"
    CUSTOMER = "customer", "Customer"
    ADMIN = "admin", "Admin"

class ShopOwner(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="shop_owner_profile")
    name = models.CharField(max_length=255)
    phone_number = models.CharField(max_length=15)
    address = models.TextField()
    store_name = models.CharField(max_length=255)
    registration_date = models.DateTimeField(auto_now_add=True)
    rating = models.DecimalField(max_digits=3, decimal_places=2, default=0.0)  # Average rating for shop owner

    def __str__(self):
        return self.store_name

class Customer(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="customer_profile")
    phone_number = models.CharField(max_length=15)
    address = models.TextField()
    wishlist = models.ManyToManyField('MobilePhone', related_name='wishlisted_by', blank=True)

    def __str__(self):
        return self.user.username

class Category(models.Model):
    name = models.CharField(max_length=255)
    slug = models.SlugField(unique=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name
    
class MobilePhone(models.Model):
    shop_owner = models.ForeignKey(ShopOwner, on_delete=models.CASCADE, related_name="mobile_phones")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name="mobile_phones")
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()

    # Network Fields
    technology = models.CharField(max_length=255, blank=True, null=True)
    network_bands = models.TextField(blank=True, null=True)

    # Launch Fields
    announcement_date = models.DateTimeField(blank=True, null=True)
    status = models.CharField(max_length=255, blank=True, null=True)

    # Body Fields
    dimensions = models.CharField(max_length=255, blank=True, null=True)
    weight = models.CharField(max_length=255, blank=True, null=True)
    sim = models.CharField(max_length=255)
    water_resistant = models.BooleanField(default=False)

    # Display Fields
    display_type = models.CharField(max_length=255, blank=True, null=True)
    display_size = models.CharField(max_length=255, blank=True, null=True)
    display_resolution = models.CharField(max_length=255, blank=True, null=True)
    display_protection = models.CharField(max_length=255, blank=True, null=True)

    # Platform Fields
    os = models.CharField(max_length=255)
    chipset = models.CharField(max_length=255, blank=True, null=True)
    cpu = models.CharField(max_length=255, blank=True, null=True)
    gpu = models.CharField(max_length=255, blank=True, null=True)

    # Memory Fields
    card_slot = models.CharField(max_length=255, blank=True, null=True)
    internal_memory = models.CharField(max_length=255, blank=True, null=True)
    ram = models.CharField(max_length=255)

    # Main Camera Fields
    main_camera = models.TextField(blank=True, null=True)
    camera_features = models.TextField(blank=True, null=True)
    video_capabilities = models.CharField(max_length=255, blank=True, null=True)

    # Selfie Camera Fields
    selfie_camera = models.TextField(blank=True, null=True)
    selfie_video = models.CharField(max_length=255, blank=True, null=True)

    # Sound Fields
    speaker = models.CharField(max_length=255, blank=True, null=True)
    jack_3_5mm = models.BooleanField(default=False)

    # Communication Fields
    wlan = models.CharField(max_length=255, blank=True, null=True)
    bluetooth = models.BooleanField(default=True)
    positioning = models.CharField(max_length=255, blank=True, null=True)
    nfc = models.BooleanField(default=False)
    usb_type = models.CharField(max_length=255, blank=True, null=True)

    # Features Fields
    sensors = models.TextField(blank=True, null=True)
    fingerprint = models.BooleanField(default=False)
    wifi = models.BooleanField(default=True)

    # Battery Fields
    battery_type = models.CharField(max_length=255, blank=True, null=True)
    battery_capacity = models.CharField(max_length=255)
    charging = models.TextField(blank=True, null=True)
    fast_charging = models.BooleanField(default=False)
    fast_wireless_charging = models.BooleanField(default=False)
    reverse_wireless_charging = models.BooleanField(default=False)

    # Miscellaneous Fields
    colors = models.TextField(blank=True, null=True)
    price_range = models.CharField(max_length=255, blank=True, null=True)
    pta_approved = models.BooleanField(default=False)
    five_g_supported = models.BooleanField(default=False)
    is_available = models.BooleanField(default=True)
    views = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    slug = models.SlugField(unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.name} - {self.shop_owner.store_name}"

class SellerReview(models.Model):
    shop_owner = models.ForeignKey(ShopOwner, on_delete=models.CASCADE, related_name="seller_reviews")
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="seller_reviews")
    review_text = models.TextField()
    rating = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.customer.user.username} for {self.shop_owner.store_name}"




# Notifications for system alerts
class Notification(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="notifications")
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Notification for {self.user.username}"







class Transaction(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="transactions")
    mobile_phone = models.ForeignKey(MobilePhone, on_delete=models.SET_NULL, null=True, related_name="transactions")
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_date = models.DateTimeField(auto_now_add=True)
    payment_method = models.CharField(max_length=255, choices=[
        ("credit_card", "Credit Card"),
        ("debit_card", "Debit Card"),
        ("cash", "Cash"),
        ("bank_transfer", "Bank Transfer")
    ])
    status = models.CharField(max_length=50, choices=[
        ("completed", "Completed"),
        ("pending", "Pending"),
        ("cancelled", "Cancelled")
    ], default="pending")

    def __str__(self):
        return f"Transaction by {self.customer.user.username} for {self.mobile_phone.name}"

class Advertisement(models.Model):
    laptop = models.ForeignKey(
        'Laptop',
        related_name='advertisements',
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )
    mobile_phone = models.ForeignKey(
        'MobilePhone',
        related_name='advertisements',
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )
    accessory = models.ForeignKey(
    'Accessory',
    related_name='advertisements',
    on_delete=models.CASCADE,
    null=True,
    blank=True
    )
    shop_owner = models.ForeignKey(ShopOwner, on_delete=models.CASCADE, related_name="advertisements")
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    is_active = models.BooleanField(default=True)
    priority = models.IntegerField(default=0)  # Higher priority ads can appear at the top

    def __str__(self):
        return f"Ad for {self.mobile_phone.name} by {self.shop_owner.store_name}"

class Inquiry(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="inquiries")
    mobile_phone = models.ForeignKey(MobilePhone, on_delete=models.CASCADE, related_name="inquiries")
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Inquiry by {self.customer.user.username} for {self.mobile_phone.name}"
    


class Tablet(models.Model):
    shop_owner = models.ForeignKey(ShopOwner, on_delete=models.CASCADE, related_name="tablets")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name="tablets")
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    
    # Tablet-specific fields
    screen_size = models.CharField(max_length=255, blank=True, null=True)
    operating_system = models.CharField(max_length=255, blank=True, null=True)
    storage = models.CharField(max_length=255)
    ram = models.CharField(max_length=255)
    battery_capacity = models.CharField(max_length=255)
    camera = models.CharField(max_length=255)
    sim_support = models.CharField(max_length=255, blank=True, null=True)
    
    # Common specifications (can be shared with MobilePhone model)
    display = models.CharField(max_length=255)
    os = models.CharField(max_length=255)
    wifi = models.BooleanField(default=True)
    bluetooth = models.BooleanField(default=True)
    usb_type_c = models.BooleanField(default=True)
    is_available = models.BooleanField(default=True)
    views = models.PositiveIntegerField(default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    slug = models.SlugField(unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.name} - {self.shop_owner.store_name}"



class Accessory(models.Model):
    shop_owner = models.ForeignKey(ShopOwner, on_delete=models.CASCADE, related_name="accessories")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name="accessories")
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField(blank=True, null=True)
    mobile_phone = models.ForeignKey(MobilePhone, related_name='accessories', on_delete=models.CASCADE, null=True, blank=True)

    # Accessory-specific fields
    type = models.CharField(max_length=255, blank=True, null=True)  # E.g., "Case", "Screen Protector", "Charger"
    compatibility = models.CharField(max_length=255, blank=True, null=True)  # E.g., "For iPhone", "Universal"
    
    # Common specifications (can be shared with MobilePhone model)
    is_available = models.BooleanField(default=True)
    views = models.PositiveIntegerField(default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    slug = models.SlugField(unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.name} - {self.shop_owner.store_name}"


class Laptop(models.Model):
    shop_owner = models.ForeignKey(ShopOwner, on_delete=models.CASCADE, related_name="laptops")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name="laptops")
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    
    # Laptop-specific fields
    screen_size = models.CharField(max_length=255, blank=True, null=True)
    operating_system = models.CharField(max_length=255, blank=True, null=True)
    storage = models.CharField(max_length=255)
    ram = models.CharField(max_length=255)
    processor = models.CharField(max_length=255)
    graphics_card = models.CharField(max_length=255, blank=True, null=True)
    battery_life = models.CharField(max_length=255)
    
    # Common specifications (can be shared with MobilePhone model)
    display = models.CharField(max_length=255)
    os = models.CharField(max_length=255)
    wifi = models.BooleanField(default=True)
    bluetooth = models.BooleanField(default=True)
    usb_type_c = models.BooleanField(default=True)
    is_available = models.BooleanField(default=True)
    views = models.PositiveIntegerField(default=0)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    slug = models.SlugField(unique=True, blank=True)
    brand = models.CharField(max_length=255, blank=True, null=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.name} - {self.shop_owner.store_name}"


# Image Model Debugging
class Image(models.Model):
    mobile_phone = models.ForeignKey(
        MobilePhone, on_delete=models.CASCADE, related_name="images", blank=True, null=True
    )
    laptop = models.ForeignKey(
        Laptop, on_delete=models.CASCADE, related_name="images", blank=True, null=True
    )
    accessory = models.ForeignKey(
        Accessory, on_delete=models.CASCADE, related_name="images", blank=True, null=True
    )
    image = models.ImageField(
        upload_to="images/",
        validators=[FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])]
    )
    is_featured = models.BooleanField(default=False)

    accessory = models.ForeignKey(Accessory, related_name='images', on_delete=models.CASCADE, null=True, blank=True)
    laptop = models.ForeignKey(Laptop, related_name='images', on_delete=models.CASCADE, null=True, blank=True)
    image = models.ImageField(upload_to='images/')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Image for {self.mobile_phone or self.laptop or self.accessory}"


class Review(models.Model):
    accessory = models.ForeignKey(Accessory, related_name="reviews", on_delete=models.CASCADE, null=True, blank=True)
    laptop = models.ForeignKey(Laptop, related_name='reviews', on_delete=models.CASCADE, null=True, blank=True)
    mobile_phone = models.ForeignKey(MobilePhone, on_delete=models.CASCADE, related_name="reviews", null=True, blank=True)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="reviews",  null=True, blank=True)
    review_text = models.TextField()
    rating = models.PositiveIntegerField(choices=[(i, i) for i in range(1, 6)])
    created_at = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)


    def __str__(self):
        if self.user:
            # Check for the mobile_phone, laptop, or accessory field and return the first one found
            if self.mobile_phone:
                return f'Review by {self.user.username} for {self.mobile_phone}'
            elif self.laptop:
                return f'Review by {self.user.username} for {self.laptop}'
            elif self.accessory:
                return f'Review by {self.user.username} for {self.accessory}'
            else:
                return f'Review by {self.user.username} for an unspecified product'
        return 'No user assigned'

    


class Product(models.Model):
    CATEGORY_CHOICES = [
        ('smartphones', 'Smartphones'),
        ('laptops', 'Laptops'),
        ('accessories', 'Accessories'),
        # Add other categories here
    ]
    
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(upload_to='products/')
    category = models.CharField(choices=CATEGORY_CHOICES, max_length=50)
    
    def __str__(self):
        return self.name

views.py,
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from django.http import HttpResponse
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.views import PasswordResetView, PasswordResetConfirmView
from django.urls import reverse_lazy, reverse
from django.core.mail import send_mail
from django.contrib import messages
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import AccessoryForm, LaptopForm, UserUpdateForm, ProfileUpdateForm

from .models import (
    MobilePhone, Product, Review, Advertisement, Image, Order, SellerReview, 
    Laptop, Accessory, ShopOwner, PasswordResetToken, Profile, Address, 
    PaymentMethod, Wishlist
)
from .forms import (
    ReviewForm, InquiryForm, MobilePhoneForm, OrderForm, SellerReviewForm, 
    SignupForm, LoginForm, CustomPasswordResetForm, CustomSetPasswordForm
)



@login_required
def orders_list(request):
    orders = Order.objects.filter(user=request.user).order_by('-created_at')
    return render(request, 'store/orders.html', {'orders': orders})

@login_required
def order_detail(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'store/order_detail.html', {'order': order})


@login_required
def profile(request):
    if request.method == 'POST':
        user_form = UserUpdateForm(request.POST, instance=request.user)
        profile_form = ProfileUpdateForm(request.POST, 
                                       request.FILES, 
                                       instance=request.user.profile)
        if not profile_form.is_valid():
            print(profile_form.errors)
            
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            messages.success(request, 'Your profile has been updated!')
            return redirect('profile')
    else:
        user_form = UserUpdateForm(instance=request.user)
        profile_form = ProfileUpdateForm(instance=request.user.profile)

    context = {
        'user_form': user_form,
        'profile_form': profile_form
    }
    return render(request, 'users/profile.html', context)                

def password_reset_request(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        try:
            user = User.objects.get(email=email)
            
            # Create reset token
            reset_token = PasswordResetToken.objects.create(user=user)
            
            # Build reset URL
            reset_url = request.build_absolute_uri(
                reverse('password_reset_confirm', args=[str(reset_token.token)])
            )
            
            # Email content
            context = {
                'user': user,
                'reset_url': reset_url,
                'expires_in': '24 hours'
            }
            html_message = render_to_string('password_reset_email.html', context)
            plain_message = strip_tags(html_message)
            
            # Send email
            send_mail(
                'Password Reset Request',
                plain_message,
                settings.DEFAULT_FROM_EMAIL,
                [user.email],
                html_message=html_message,
                fail_silently=False,
            )
            
            messages.success(request, 'Password reset link has been sent to your email.')
            return redirect('login')
            
        except User.DoesNotExist:
            messages.error(request, 'No user found with this email address.')
    
    return render(request, 'registration/password_reset_form.html')

def password_reset_confirm(request, token):
    try:
        reset_token = PasswordResetToken.objects.get(token=token)
        
        if not reset_token.is_valid:
            messages.error(request, 'This password reset link has expired or been used.')
            return redirect('password_reset_request')
        
        if request.method == 'POST':
            password = request.POST.get('password')
            confirm_password = request.POST.get('confirm_password')
            
            if password != confirm_password:
                messages.error(request, 'Passwords do not match.')
                return render(request, 'password_reset_confirm.html')
            
            # Update password
            user = reset_token.user
            user.set_password(password)
            user.save()
            
            # Mark token as used
            reset_token.is_used = True
            reset_token.save()
            
            messages.success(request, 'Your password has been successfully reset.')
            return redirect('login')
            
        return render(request, 'password_reset_confirm.html')
        
    except PasswordResetToken.DoesNotExist:
        messages.error(request, 'Invalid password reset link.')
        return redirect('password_reset_request')


def index(request):
    phones = MobilePhone.objects.filter(is_available=True)
    ads = Advertisement.objects.filter(
        is_active=True, 
        start_date__lte=timezone.now(), 
        end_date__gte=timezone.now()
    ).order_by('-priority')
    laptops = Laptop.objects.all()
    accessories = Accessory.objects.all()
    ads = Advertisement.objects.all()
    return render(request, 'index.html', {
        'phones': phones,
        'ads': ads,
        'laptops': laptops,
        'accessories': accessories
    })

def phone_detail(request, slug):
    phone = get_object_or_404(MobilePhone, slug=slug)
    reviews = phone.reviews.all()
    images = phone.images.all()  # Get all images associated with the phone
    advertisements = Advertisement.objects.filter(mobile_phone=phone, is_active=True)

    if request.method == 'POST':
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            if request.user.is_authenticated:
                review.user = request.user
                review.mobile_phone = phone
                review.save()
                return redirect('phone_detail', slug=slug)
            else:
                return redirect('login')  # Redirect unauthenticated users to login
    else:
        form = ReviewForm()

    rating_range = range(1, 6)

    return render(request, 'phone_detail.html', {
        'phone': phone, 
        'reviews': reviews, 
        'form': form,
        'rating_range': rating_range,
        'images': images,  # Pass images to template
        'advertisements': advertisements  # Pass advertisements to template
    })




def laptops(request):
    laptops = Laptop.objects.filter(is_available=True)
    return render(request, 'laptops.html', {'laptops': laptops})


def accessories(request):
    accessories = Accessory.objects.filter(is_available=True)
    return render(request, 'accessories.html', {'accessories': accessories})


def laptop_detail(request, slug):
    laptop = get_object_or_404(Laptop, slug=slug)  # Assuming you have a 'slug' field in your Laptop model
    reviews = laptop.reviews.all()  # Assuming there's a related name for reviews in the Laptop model
    rating_range = range(1, 6)

    if request.method == 'POST':
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            if request.user.is_authenticated:
                review.user = request.user
                review.laptop = laptop
                review.save()
                return redirect('laptop_detail', slug=slug)
            else:
                return redirect('login')  # Redirect unauthenticated users to login
    else:
        form = ReviewForm()

    return render(request, 'laptop_detail.html', {
        'laptop': laptop,
        'reviews': reviews,
        'form': form,
        'rating_range': rating_range,
    })

def accessory_detail(request, slug):
    accessory = get_object_or_404(Accessory, slug=slug)
    reviews = accessory.reviews.all()  # Assuming the related_name for reviews is 'reviews'
    rating_range = range(1, 6)  # For star ratings

    if request.method == 'POST':
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            if request.user.is_authenticated:
                review.user = request.user
                review.accessory = accessory
                review.save()
                return redirect('accessory_detail', slug=slug)
            else:
                return redirect('login')  # Redirect unauthenticated users to login
    else:
        form = ReviewForm()

    return render(request, 'accessory_detail.html', {
        'accessory': accessory,
        'reviews': reviews,
        'form': form,
        'rating_range': rating_range,
    })

def submit_review(request, laptop_id):
    laptop = get_object_or_404(Laptop, id=laptop_id)
    
    if request.method == 'POST':
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.laptop = laptop
            if request.user.is_authenticated:
                review.user = request.user  # Assign the logged-in user
                review.save()
                return redirect('laptop_detail', slug=laptop.slug)  # Redirect after saving
            else:
                return redirect('login')  # Redirect to login if the user is not authenticated
    else:
        form = ReviewForm()

    return render(request, 'laptop_detail.html', {
        'laptop': laptop,
        'form': form,
    })



def mobile_phone_list(request):
    phones = MobilePhone.objects.all()
    return render(request, 'phones.html', {'phones': phones})

def order_create(request):
    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.customer = request.user.customer_profile
            order.save()
            return redirect('order_detail', pk=order.id)
    else:
        form = OrderForm()
    return render(request, 'order_create.html', {'form': form})

def seller_review(request, shop_owner_id):
    shop_owner = ShopOwner.objects.get(id=shop_owner_id)
    if request.method == 'POST':
        form = SellerReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = request.user
            review.shop_owner = shop_owner
            review.save()
            return redirect('shop_owner_detail', pk=shop_owner.id)
    else:
        form = SellerReviewForm()
    return render(request, 'seller_review.html', {'form': form, 'shop_owner': shop_owner})



def smartphones_category(request):
    products = Product.objects.filter(category='smartphones')
    return render(request, 'category_page.html', {'category_name': 'Smartphones', 'products': products})

def laptops_category(request):
    products = Product.objects.filter(category='laptops')
    return render(request, 'category_page.html', {'category_name': 'Laptops', 'products': products})

def accessories_category(request):
    products = Product.objects.filter(category='accessories')
    return render(request, 'category_page.html', {'category_name': 'Accessories', 'products': products})



def signup_view(request):
    if request.method == 'POST':
        form = SignupForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('index')  # Redirect after signup
    else:
        form = SignupForm()
    return render(request, 'registration/signup.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('index')  # Redirect after login
    else:
        form = LoginForm()
    return render(request, 'registration/login.html', {'form': form})

def logout_view(request):
    logout(request)
    return redirect('login')  # Redirect to login page after logout






def create_mobile_phone(request):
    if request.method == 'POST':
        form = MobilePhoneForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('success_url')  # Replace with the actual redirect
    else:
        form = MobilePhoneForm()
    return render(request, 'create_mobile_phone.html', {'form': form})

def create_laptop(request):
    if request.method == 'POST':
        form = LaptopForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('success_url')  # Replace with the actual redirect
    else:
        form = LaptopForm()
    return render(request, 'create_laptop.html', {'form': form})

def create_accessory(request):
    if request.method == 'POST':
        form = AccessoryForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('success_url')  # Replace with the actual redirect
    else:
        form = AccessoryForm()
    return render(request, 'create_accessory.html', {'form': form})


urls.py,
from django.urls import path
from . import views
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.auth import views as auth_views
from .views import (
    signup_view,
    login_view,
    logout_view,
    password_reset_confirm,
    password_reset_request,
)


urlpatterns = [
    path("", views.index, name="index"),
    path("phone/<slug:slug>/", views.phone_detail, name="phone_detail"),
    path("laptops/", views.laptops, name="laptops"),
    path("laptops/<slug:slug>/", views.laptop_detail, name="laptop_detail"),
    path("accessories/", views.accessories, name="accessories"),
    path("accessories/<slug:slug>/", views.accessory_detail, name="accessory_detail"),
    path("smartphones/", views.smartphones_category, name="smartphones_category"),
    path("laptops/", views.laptops_category, name="laptops_category"),
    path("accessories/", views.accessories_category, name="accessories_category"),
    path("phones/", views.mobile_phone_list, name="phones"),
    path("phones/<slug:slug>/", views.phone_detail, name="phone_detail"),
    path("signup/", signup_view, name="signup"),
    path("login/", login_view, name="login"),
    path("logout/", logout_view, name="logout"),
    path("password_reset_done/",auth_views.PasswordResetDoneView.as_view(),name="password_reset_done",),
    path("password_reset_complete/",auth_views.PasswordResetCompleteView.as_view(),name="password_reset_complete",),
    path("password_reset/", views.password_reset_request, name="password_reset_request"),
    path("password_reset/confirm/<str:token>/",views.password_reset_confirm,name="password_reset_confirm",),
    path("profile/", views.profile, name="profile"),
    path("password-change/",auth_views.PasswordChangeView.as_view(template_name="users/password_change.html"),name="password_change",),
    path("password-change/done/",auth_views.PasswordChangeDoneView.as_view(template_name="users/password_change_done.html"),name="password_change_done",),
    path('orders/', views.orders_list, name='orders'),
    path('orders/<int:order_id>/', views.order_detail, name='order_detail'),
    path('create/mobile-phone/', views.create_mobile_phone, name='create_mobile_phone'),
    path('create/laptop/', views.create_laptop, name='create_laptop'),
    path('create/accessory/', views.create_accessory, name='create_accessory'),
    ]+static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



├── accessories.html

{% extends 'base.html' %}
{% load static %}
{% block content %}
<section class="mb-12">
    <h2 class="text-3xl font-bold mb-6 text-center">Available Accessories</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {% for accessory in accessories %}
        <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
            {% if accessory.images.first %}
                <img src="{{ accessory.images.first.image.url }}" alt="{{ accessory.name }}" class="w-full h-60 object-contain bg-gray-100">
            {% else %}
                <img src="{% static 'default_image.jpg' %}" alt="Default Image" class="w-full h-60 object-contain bg-gray-100">
            {% endif %}
            <div class="p-4">
                <h3 class="text-xl font-bold mb-2">{{ accessory.name }}</h3>
                <p class="text-gray-600 mb-4">{{ accessory.description|truncatewords:10 }}</p>
                <p class="font-bold text-lg text-blue-600 mb-4">PKR {{ accessory.price }}</p>
                <a href="{% url 'accessory_detail' accessory.slug %}" class="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition-colors duration-300">
                    View Details
                </a>
            </div>
        </div>
        {% endfor %}
    </div>
</section>
{% endblock %}


├── accessory_detail.html

{% extends 'base.html' %}

{% block content %}
<div class="container mx-auto p-6">
    <!-- Main Product Card -->
    <div class="bg-white rounded-2xl shadow-xl overflow-hidden transition-shadow hover:shadow-2xl">
        <div class="flex flex-col lg:flex-row">
            <!-- Image Gallery Section -->
            <div class="lg:w-1/2 p-8 bg-gray-50">
                <div class="relative w-full h-[500px] mb-6">
                    {% if phone %}
                        <img id="previewImage" src="{{ phone.images.first.image.url }}" alt="{{ phone.name }}" 
                             class="w-full h-full object-contain rounded-xl shadow-md transition-transform duration-300 hover:scale-105">
                    {% elif accessory %}
                        <img id="previewImage" src="{{ accessory.images.first.image.url }}" alt="{{ accessory.name }}" 
                             class="w-full h-full object-contain rounded-xl shadow-md transition-transform duration-300 hover:scale-105">
                    {% endif %}
                    <canvas id="zoomCanvas" class="absolute top-0 left-0 w-full h-full pointer-events-none rounded-xl"></canvas>
                </div>
                <!-- Thumbnail Gallery -->
                <div class="mt-6 grid grid-cols-4 gap-4">
                    {% if phone %}
                        {% for image in images %}
                        <div class="aspect-square overflow-hidden rounded-lg border-2 border-gray-200 hover:border-indigo-500 transition-all duration-300 transform hover:scale-105">
                            <img src="{{ image.image.url }}" 
                                 alt="Image {{ forloop.counter }} for {{ phone.name }}" 
                                 class="w-full h-full object-contain cursor-pointer" 
                                 onmouseover="updatePreview('{{ image.image.url }}')">
                        </div>
                        {% endfor %}
                    {% elif accessory %}
                        {% for image in accessory.images.all %}
                        <div class="aspect-square overflow-hidden rounded-lg border-2 border-gray-200 hover:border-indigo-500 transition-all duration-300 transform hover:scale-105">
                            <img src="{{ image.image.url }}" 
                                 alt="Image {{ forloop.counter }} for {{ accessory.name }}" 
                                 class="w-full h-full object-contain cursor-pointer" 
                                 onmouseover="updatePreview('{{ image.image.url }}')">
                        </div>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>

            <!-- Product Details Section -->
            <div class="lg:w-1/2 p-8 lg:pl-12 flex flex-col">
                {% if phone %}
                    <h1 class="text-4xl font-bold text-gray-900 mb-4 leading-tight">{{ phone.name }}</h1>
                    <p class="text-lg text-gray-600 mb-8 leading-relaxed">{{ phone.description }}</p>
                {% elif accessory %}
                    <h1 class="text-4xl font-bold text-gray-900 mb-4 leading-tight">{{ accessory.name }}</h1>
                    <p class="text-lg text-gray-600 mb-8 leading-relaxed">{{ accessory.description }}</p>
                {% endif %}
                
                <!-- Price Tag -->
                <div class="bg-green-50 p-4 rounded-xl mb-8">
                    <div class="flex items-center justify-between">
                        <span class="text-lg font-semibold text-gray-700">Price</span>
                        {% if phone %}
                            <span class="text-3xl font-bold text-green-600">PKR {{ phone.price }}</span>
                        {% elif accessory %}
                            <span class="text-3xl font-bold text-green-600">PKR {{ accessory.price }}</span>
                        {% endif %}
                    </div>
                </div>

                <!-- Specifications Grid -->
                {% if phone %}
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Storage</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.storage }} GB</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">RAM</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.ram }} GB</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Battery</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.battery_capacity }} mAh</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Chipset</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.chipset }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Camera</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.camera }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Display</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.display }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Operating System</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.os }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">SIM</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.sim }}</p>
                    </div>
                </div>

                <!-- Phone-specific Features -->
                <div class="flex flex-wrap gap-4 mb-8">
                    <div class="px-4 py-2 rounded-full {% if phone.pta_approved %}bg-green-100 text-green-800{% else %}bg-red-100 text-red-800{% endif %} font-medium">
                        PTA {% if phone.pta_approved %}Approved{% else %}Not Approved{% endif %}
                    </div>
                    <div class="px-4 py-2 rounded-full {% if phone.five_g_supported %}bg-blue-100 text-blue-800{% else %}bg-gray-100 text-gray-800{% endif %} font-medium">
                        {% if phone.five_g_supported %}5G Supported{% else %}4G{% endif %}
                    </div>
                </div>
                {% elif accessory %}
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Category</span>
                        <p class="text-lg font-semibold text-gray-800">{{ accessory.category.name }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Brand</span>
                        <p class="text-lg font-semibold text-gray-800">{{ accessory.brand }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Compatibility</span>
                        <p class="text-lg font-semibold text-gray-800">{{ accessory.compatibility }}</p>
                    </div>
                </div>
                {% endif %}

                <!-- Add to Cart Button -->
                <button class="w-full bg-green-600 text-white py-4 px-8 rounded-xl text-lg font-semibold hover:bg-green-700 transform transition-all duration-300 hover:scale-[1.02] focus:outline-none focus:ring-4 focus:ring-green-200">
                    Add to Cart
                </button>
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="mt-16">
        <h3 class="text-3xl font-bold mb-8 text-gray-900">Customer Reviews</h3>
        {% if reviews %}
        <div class="grid gap-6">
            {% for review in reviews %}
            <div class="bg-white rounded-xl shadow-md p-6 transition-all duration-300 hover:shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                            <span class="text-xl font-bold text-green-600">{{ review.user.username|make_list|first }}</span>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900">{{ review.user.username }}</h4>
                            <p class="text-sm text-gray-500">{{ review.created_at|date:"D M d, Y" }}</p>
                        </div>
                    </div>
                    <div class="flex">
                        {% for i in rating_range %}
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" 
                             fill="{% if i <= review.rating %}#FCD34D{% else %}#E5E7EB{% endif %}" 
                             class="mr-1" viewBox="0 0 16 16">
                            <path d="M3.612 15.443c-.396.217-.878-.115-.786-.545l1.135-4.442L.173 6.545c-.39-.38-.188-1.031.35-1.092l4.511-.335L7.9.473c.216-.611.962-.611 1.178 0l2.285 4.64 4.505.335c.538.061.738.712.348 1.092l-3.788 4.411 1.128 4.442c.092.43-.39.762-.786.545l-4.43-2.586-4.43 2.586z"/>
                        </svg>
                        {% endfor %}
                    </div>
                </div>
                <p class="text-gray-700 leading-relaxed">{{ review.review_text }}</p>
            </div>
            {% endfor %}
        </div>
        {% else %}
        <div class="bg-gray-50 rounded-xl p-8 text-center">
            <p class="text-gray-600 text-lg">No reviews yet. Be the first to share your experience!</p>
        </div>
        {% endif %}
    </div>

    <!-- Add Review Form -->
    <div class="mt-16 mb-8">
        <h4 class="text-2xl font-bold mb-6 text-gray-900">Write a Review</h4>
        <form method="post" class="bg-white rounded-xl shadow-lg p-8">
            {% csrf_token %}
            <div class="space-y-6">
                <div>
                    <label for="rating" class="block text-lg font-medium text-gray-700 mb-4">Rating</label>
                    <div class="flex space-x-4">
                        {% for i in rating_range %}
                        <label class="relative">
                            <input type="radio" name="rating" value="{{ i }}" class="hidden peer" {% if form.rating.value == i %}checked{% endif %}>
                            <div class="w-12 h-12 flex items-center justify-center rounded-lg border-2 border-gray-200 cursor-pointer peer-checked:border-green-500 peer-checked:bg-green-50">
                                <span class="text-xl font-semibold text-gray-700 peer-checked:text-green-600">{{ i }}</span>
                            </div>
                        </label>
                        {% endfor %}
                    </div>
                </div>

                <div>
                    <label for="review-text" class="block text-lg font-medium text-gray-700 mb-2">Your Review</label>
                    <textarea 
                        name="review_text" 
                        id="review-text" 
                        rows="4" 
                        class="w-full border-2 border-gray-200 rounded-xl p-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                        placeholder="Share your experience with this product..."></textarea>
                </div>

                <button type="submit" 
                        class="w-full bg-green-600 text-white py-4 px-8 rounded-xl text-lg font-semibold hover:bg-green-700 transform transition-all duration-300 hover:scale-[1.02] focus:outline-none focus:ring-4 focus:ring-green-200">
                    Submit Review
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    function updatePreview(imageUrl) {
        const previewImage = document.getElementById('previewImage');
        previewImage.src = imageUrl;
        
        // Add fade effect
        previewImage.style.opacity = '0';
        setTimeout(() => {
            previewImage.style.opacity = '1';
        }, 100);
    }

    // Initialize preview image transition
    const previewImage = document.getElementById('previewImage');
    previewImage.style.transition = 'all 0.3s ease-in-out';

    // Zoom functionality
    const zoomCanvas = document.getElementById('zoomCanvas');
    const ctx = zoomCanvas.getContext('2d');

    previewImage.addEventListener('mousemove', (e) => {
        const rect = previewImage.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const zoomFactor = 2;
        const width = previewImage.width * zoomFactor;
        const height = previewImage.height * zoomFactor;
        const zoomX = (x / previewImage.width) * width - zoomCanvas.width / 2;
        const zoomY = (y / previewImage.height) * height - zoomCanvas.height / 2;

        ctx.clearRect(0, 0, zoomCanvas.width, zoomCanvas.height);
        ctx.drawImage(
            previewImage,
            zoomX,
            zoomY,
            zoomCanvas.width,
            zoomCanvas.height,
            0,
            0,
            zoomCanvas.width,
            zoomCanvas.height
        );
    });

    previewImage.addEventListener('mouseleave', () => {
        ctx.clearRect(0, 0, zoomCanvas.width, zoomCanvas.height);
    });

    // Adjust canvas size based on the preview image
    function resizeCanvas() {
        zoomCanvas.width = previewImage.clientWidth;
        zoomCanvas.height = previewImage.clientHeight;
    }

    window.addEventListener('resize', resizeCanvas);
    window.addEventListener('load', resizeCanvas);
</script>
{% endblock %}


├── base.html

{% load widget_tweaks %}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Store</title>
    <meta name="description" content="Your trusted destination for the latest mobile devices and accessories.">
    <meta name="keywords" content="mobile, phones, laptops, accessories, store">
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
      rel="stylesheet"
    />
  </head>

  <body
    class="bg-gradient-to-br from-gray-50 to-gray-100 text-gray-800 min-h-screen flex flex-col"
  >
    <!-- Navbar -->
    <!-- Updated Navbar Section -->
    <header class="bg-white shadow-md sticky top-0 z-50">
      <nav class="container mx-auto px-4">
          <div class="flex justify-between items-center h-16">
              <!-- Logo -->
              <a href="{% url 'index' %}" class="flex items-center space-x-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                  <span class="text-xl font-bold">Store</span>
              </a>
    
              <!-- Mobile menu button -->
              <button id="mobile-menu-button" class="md:hidden rounded-md p-2 inline-flex items-center justify-center text-gray-700 hover:text-blue-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500">
                  <span class="sr-only">Open main menu</span>
                  <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                  </svg>
              </button>
    
              <!-- Desktop Navigation -->
              <div class="hidden md:flex md:items-center md:space-x-6">
                  <a href="{% url 'index' %}" class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">Home</a>
                  <a href="{% url 'phones' %}" class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">Phones</a>
                  <a href="{% url 'laptops' %}" class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">Laptops</a>
                  <a href="{% url 'accessories' %}" class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium">Accessories</a>
                  
                  {% if user.is_authenticated %}
                      <!-- Profile Dropdown -->
                      <div class="relative" id="user-menu">
                          <button id="user-menu-button" class="flex items-center space-x-2 text-gray-700 hover:text-blue-600">
                              <div class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
                                  {% if user.profile.avatar %}
                                      <img src="{{ user.profile.avatar.url }}" alt="Profile" class="w-8 h-8 rounded-full" height="32" width="32">
                                  {% else %}
                                      <span class="text-sm font-medium">{{ user.username|make_list|first|upper }}</span>
                                  {% endif %}
                              </div>
                              <span class="text-sm font-medium">{{ user.username }}</span>
                          </button>
                          
                          <!-- Dropdown Menu -->
                          <div id="user-menu-dropdown" class="hidden absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                              <div class="py-1">
                                  <a href="{% url 'profile' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Your Profile</a>
                                  <a href="{% url 'orders' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Your Orders</a>
                                  <a href="{% url 'logout' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign out</a>
                              </div>
                          </div>
                      </div>
                  {% else %}
                      <a href="{% url 'login' %}" class="bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700">Sign in</a>
                  {% endif %}
              </div>
          </div>
    
          <!-- Mobile Navigation -->
          <div id="mobile-menu" class="hidden md:hidden">
              <div class="px-2 pt-2 pb-3 space-y-1">
                  <a href="{% url 'index' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Home</a>
                  <a href="{% url 'phones' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Phones</a>
                  <a href="{% url 'laptops' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Laptops</a>
                  <a href="{% url 'accessories' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Accessories</a>
                  
                  {% if user.is_authenticated %}
                      <a href="{% url 'profile' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Your Profile</a>
                      <a href="{% url 'orders' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Your Orders</a>
                      <a href="{% url 'logout' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Sign out</a>
                  {% else %}
                      <a href="{% url 'login' %}" class="block text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-base font-medium">Sign in</a>
                  {% endif %}
              </div>
          </div>
      </nav>
    </header>
    
    <script>
      // Mobile menu toggle
      document.getElementById('mobile-menu-button').addEventListener('click', function() {
          document.getElementById('mobile-menu').classList.toggle('hidden');
      });
    
      // User menu dropdown
      const userMenuButton = document.getElementById('user-menu-button');
      const userMenuDropdown = document.getElementById('user-menu-dropdown');
    
      if (userMenuButton && userMenuDropdown) {
          // Toggle dropdown when clicking the button
          userMenuButton.addEventListener('click', function(event) {
              event.stopPropagation();
              userMenuDropdown.classList.toggle('hidden');
          });
    
          // Close dropdown when clicking outside
          document.addEventListener('click', function(event) {
              if (!userMenuDropdown.contains(event.target) && !userMenuButton.contains(event.target)) {
                  userMenuDropdown.classList.add('hidden');
              }
          });
    
          // Close dropdown when pressing Escape key
          document.addEventListener('keydown', function(event) {
              if (event.key === 'Escape') {
                  userMenuDropdown.classList.add('hidden');
              }
          });
      }
    </script>

    <main class="container mx-auto py-8 px-6 lg:px-12 flex-grow">
      {% block content %} {% endblock content %}
    </main>

    <footer class="bg-white shadow-inner mt-12">
      <div class="container mx-auto py-8 px-6 lg:px-12">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 class="text-lg font-semibold text-gray-800 mb-4">About Us</h3>
            <p class="text-gray-600">
              Your trusted destination for the latest mobile devices and
              accessories.
            </p>
          </div>
          <div>
            <h3 class="text-lg font-semibold text-gray-800 mb-4">
              Quick Links
            </h3>
            <ul class="space-y-2 text-gray-600">
              <li>
                <a
                  href="#"
                  class="hover:text-indigo-600 transition-colors duration-300"
                  >Privacy Policy</a
                >
              </li>
              <li>
                <a
                  href="#"
                  class="hover:text-indigo-600 transition-colors duration-300"
                  >Terms of Service</a
                >
              </li>
              <li>
                <a
                  href="#"
                  class="hover:text-indigo-600 transition-colors duration-300"
                  >Contact Us</a
                >
              </li>
            </ul>
          </div>
          <div>
            <h3 class="text-lg font-semibold text-gray-800 mb-4">
              Connect With Us
            </h3>
            <div class="flex space-x-4">
              <a
                href="#"
                class="text-gray-600 hover:text-indigo-600 transition-colors duration-300"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path
                    d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"
                  />
                </svg>
              </a>
              <a
                href="#"
                class="text-gray-600 hover:text-indigo-600 transition-colors duration-300"
              >
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path
                    d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.161a4.92 4.92 0 001.527 6.568c-.947-.03-1.839-.29-2.614-.722-.001.024-.001.048-.001.073a4.92 4.92 0 003.94 4.828 4.93 4.93 0 01-2.21.084 4.92 4.92 0 004.604 3.417 9.868 9.868 0 01-6.102 2.1c-.398 0-.79-.023-1.175-.068a13.944 13.944 0 007.548 2.209c9.057 0 14.004-7.39 14.004-13.804 0-.209 0-.417-.014-.624A9.83 9.83 0 0024 4.59a9.82 9.82 0 01-2.047 3.945z"
                  />
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  </body>
</html>



├── category_page.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ category_name }}</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>
    <header>
        <h1>{{ category_name }}</h1>
    </header>

    <main>
        {% if products %}
            <ul>
                {% for product in products %}
                    <li>
                        <h2>{{ product.name }}</h2>
                        <p>Price: {{ product.price }}</p>
                        <p>{{ product.description }}</p>
                        <!-- Add other product fields if needed -->
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No products available in this category.</p>
        {% endif %}
    </main>
</body>
</html>


├── create_accessory.html
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Create Accessory</title>
    <meta name="description" content="Create a new accessory for the mobile store.">
    <meta name="keywords" content="accessory, mobile store, create accessory">
</head>
<body>
    <h1>Create Accessory</h1>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save</button>
    </form>
</body>
</html>


├── create_laptop.html
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Create Laptop</title>
    <meta name="description" content="Create a new laptop entry in the store.">
    <meta name="keywords" content="laptop, create, store, entry">
</head>
<body>
    <h1>Create Laptop</h1>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save</button>
    </form>
</body>
</html>



├── create_mobile_phone.html
{% load static %}
{% load custom_filters %}
{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Mobile Phone</title>
    <meta name="description" content="Create a new mobile phone entry with detailed specifications and media.">
    <meta name="keywords" content="mobile phone, create, specifications, media, new device">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .glass-morphism {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
        }
        .gradient-bg {
            background: linear-gradient(to right, #4F46E5, #7C3AED);
        }
        .input-shadow {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06), 0 0 0 1px rgba(0, 0, 0, 0.08);
            transition: all 0.2s ease;
        }
        .input-shadow:hover {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.08), 0 0 0 1px rgba(79, 70, 229, 0.2);
        }
        .input-shadow:focus {
            box-shadow: 0 4px 8px rgba(79, 70, 229, 0.15), 0 0 0 2px rgba(79, 70, 229, 0.3);
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-100 to-pink-100 p-4">
    <div class="max-w-5xl mx-auto">
        <!-- Header Card -->
        <div class="glass-morphism rounded-t-2xl p-6 border border-gray-200 shadow-sm">
            <div class="flex items-center space-x-4">
                <div class="p-2 bg-indigo-600 rounded-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                    </svg>
                </div>
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">Add New Mobile Phone</h1>
                    <p class="text-sm text-gray-500">Enter the device specifications below</p>
                </div>
            </div>
        </div>

        <!-- Form Card -->
        <div class="glass-morphism rounded-b-2xl p-6 border-x border-b border-gray-200 shadow-lg">
            <form method="post" enctype="multipart/form-data">
                {% csrf_token %}

                <!-- Basic Information Section -->
                <div class="mb-8">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Basic Information</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {% for field in form %}
                            {% if field.field.widget.input_type == 'text' or field.field.widget.input_type == 'select' %}
                            <div class="form-group">
                                <label class="block text-sm font-medium text-gray-700 mb-2" for="{{ field.id_for_label }}">
                                    {{ field.label }}
                                </label>
                                <div class="relative">
                                    {{ field|addclass:"input-shadow w-full rounded-lg bg-white px-4 py-3 text-gray-700 text-sm border-0 outline-none focus:ring-0" }}
                                    {% include "form_error_template.html" %}
                                </div>
                            </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>

                <!-- Numerical Specifications Section -->
                <div class="mb-8">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Technical Specifications</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {% for field in form %}
                            {% if field.field.widget.input_type == 'number' %}
                            <div class="form-group">
                                <label class="block text-sm font-medium text-gray-700 mb-2" for="{{ field.id_for_label }}">
                                    {{ field.label }}
                                </label>
                                <div class="relative">
                                    {{ field|addclass:"input-shadow w-full rounded-lg bg-white px-4 py-3 text-gray-700 text-sm border-0 outline-none focus:ring-0" }}
                                    {% include "form_error_template.html" %}
                                </div>
                            </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>

                <!-- File Upload Section -->
                <div class="mb-8">
                    <h2 class="text-lg font-semibold text-gray-700 mb-4">Media</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {% for field in form %}
                            {% if field.field.widget.input_type == 'file' %}
                            <div class="form-group">
                                <label class="block text-sm font-medium text-gray-700 mb-2" for="{{ field.id_for_label }}">
                                    {{ field.label }}
                                </label>
                                <div class="relative">
                                    {{ field|addclass:"input-shadow w-full rounded-lg bg-white px-4 py-3 text-gray-700 text-sm border-0 outline-none focus:ring-0" }}
                                    {% include "form_error_template.html" %}
                                </div>
                            </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>

                <div class="flex items-center justify-end space-x-4">
                    <button type="button" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white rounded-lg input-shadow hover:bg-gray-50 focus:outline-none">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-6 py-2 text-sm font-medium text-white rounded-lg gradient-bg hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow-lg transition-all duration-150 ease-in-out">
                        Save Device
                    </button>
                </div>
            </form>
        </div>
    </div>
</body>
</html>
{% endblock content %}


├── create_profile.html
<h2>Create Your Profile</h2>

<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Profile</button>
</form>




├── index.html
{% extends "base.html" %}
{% load custom_filters %}
{% load static %}  <!-- Add this line to load the static tag -->
{% block content %}
<!-- Hero Section -->
<section class="bg-blue-600 text-white text-center py-20">
    <h1 class="text-4xl font-bold mb-4">Welcome to Store</h1>
    <p class="text-lg mb-6">Explore the best phones at unbeatable prices. Find your perfect device now!</p>
    <a href="#phones" class="bg-white text-blue-600 py-3 px-6 rounded-lg text-xl hover:bg-gray-100 transition-colors duration-300">Shop Now</a>
</section>

<!-- Featured Ads Section -->
{% if ads %}
  <div class="ads-section mb-12">
    <h2 class="text-3xl font-bold mb-4 text-center text-blue-600">Featured Advertisements</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {% for ad in ads %}
        <div class="ad-card bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
          <img src="{{ ad.mobile_phone.images.first.image.url }}" alt="{{ ad.mobile_phone.name }}" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          <div class="p-4">
            <h3 class="text-xl font-semibold mb-2">{{ ad.mobile_phone.name }}</h3>
            <p class="text-gray-600 mb-1">{{ ad.shop_owner.store_name }}</p>
            <p class="font-bold text-lg text-blue-600">PKR {{ ad.mobile_phone.price }}</p>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
{% else %}
  <p class="text-center text-gray-500"></p>
{% endif %}

<!-- Featured Phones Section -->
{% if phones %}
  <section id="phones" class="mb-12">
    <h2 class="text-3xl font-bold mb-6 text-center">Available Phones</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {% for phone in phones %}
        <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
          {% if phone.images.first %}
            <img src="{{ phone.images.first.image.url }}" alt="{{ phone.name }}" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          {% else %}
            <img src="{% static 'default_image.jpg' %}" alt="Default Image" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          {% endif %}
          <div class="p-4">
            <h3 class="text-xl font-bold mb-2">{{ phone.name }}</h3>
            <p class="text-gray-600 mb-4">{{ phone.description|truncatewords:10 }}</p>
            <p class="font-bold text-lg text-blue-600 mb-4">PKR {{ phone.price }}</p>
            <a href="{% url 'phone_detail' phone.slug %}" class="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition-colors duration-300">
              View Details
            </a>
          </div>
        </div>
      {% endfor %}
    </div>
  </section>
{% endif %}

<!-- Featured Laptops Section -->
{% if laptops %}
  <section id="laptops" class="mb-12">
    <h2 class="text-3xl font-bold mb-6 text-center">Available Laptops</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {% for laptop in laptops %}
        <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
          {% if laptop.images.first %}
            <img src="{{ laptop.images.first.image.url }}" alt="{{ laptop.name }}" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          {% else %}
            <img src="{% static 'default_image.jpg' %}" alt="Default Image" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          {% endif %}
          <div class="p-4">
            <h3 class="text-xl font-bold mb-2">{{ laptop.name }}</h3>
            <p class="text-gray-600 mb-4">{{ laptop.description|truncatewords:10 }}</p>
            <p class="font-bold text-lg text-blue-600 mb-4">PKR {{ laptop.price }}</p>
            <a href="{% url 'laptop_detail' laptop.slug %}" class="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition-colors duration-300">
              View Details
            </a>
          </div>
        </div>
      {% endfor %}
    </div>
  </section>
{% endif %}

<!-- Featured Accessories Section -->
{% if accessories %}
  <section class="mb-12">
    <h2 class="text-3xl font-bold mb-6 text-center">Available Accessories</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {% for accessory in accessories %}
        <div class="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
          {% if accessory.images.first %}
            <img src="{{ accessory.images.first.image.url }}" alt="{{ accessory.name }}" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          {% else %}
            <img src="{% static 'default_image.jpg' %}" alt="Default Image" class="w-full h-60 object-contain bg-gray-100" height="240" width="320">
          {% endif %}
          <div class="p-4">
            <h3 class="text-xl font-bold mb-2">{{ accessory.name }}</h3>
            <p class="text-gray-600 mb-4">{{ accessory.description|truncatewords:10 }}</p>
            <p class="font-bold text-lg text-blue-600 mb-4">PKR {{ accessory.price }}</p>
            <a href="{% url 'accessory_detail' accessory.slug %}" class="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition-colors duration-300">
              View Details
            </a>
          </div>
        </div>
      {% endfor %}
    </div>
  </section>
{% endif %}


<!-- Top Categories Section -->
<section class="bg-gray-50 py-12">
    <h2 class="text-3xl font-bold mb-6 text-center text-blue-600">Top Categories</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Smartphones Category -->
        <a href="{% url 'smartphones_category' %}" class="category-card bg-white p-6 rounded-lg shadow-lg text-center hover:shadow-xl transition-shadow duration-300">
            <img src="{% static 'category_smartphones.jpg' %}" alt="Smartphones" class="w-full h-40 object-cover rounded-lg mb-4" height="160" width="320">
            <h3 class="text-xl font-semibold mb-2">Smartphones</h3>
            <p class="text-gray-600">Explore the latest smartphones from top brands.</p>
        </a>
        <!-- Laptops Category -->
        <a href="{% url 'laptops_category' %}" class="category-card bg-white p-6 rounded-lg shadow-lg text-center hover:shadow-xl transition-shadow duration-300">
            <img src="{% static 'category_laptops.jpg' %}" alt="Laptops" class="w-full h-40 object-cover rounded-lg mb-4" height="160" width="320">
            <h3 class="text-xl font-semibold mb-2">Laptops</h3>
            <p class="text-gray-600">Browse our range of laptops for every need.</p>
        </a>
        <!-- Accessories Category -->
        <a href="{% url 'accessories_category' %}" class="category-card bg-white p-6 rounded-lg shadow-lg text-center hover:shadow-xl transition-shadow duration-300">
            <img src="{% static 'category_accessories.jpg' %}" alt="Accessories" class="w-full h-40 object-cover rounded-lg mb-4" height="160" width="320">
            <h3 class="text-xl font-semibold mb-2">Accessories</h3>
            <p class="text-gray-600">Shop for cases, chargers, and other accessories.</p>
        </a>
    </div>
</section>




<!-- Template for Category Page -->
    <div class="py-12">
        <h2 class="text-3xl font-bold mb-6 text-center text-blue-600">{{ category_name }} Products</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {% for product in products %}
                <div class="product-card bg-white p-6 rounded-lg shadow-lg text-center hover:shadow-xl transition-shadow duration-300">
                    <img src="{{ product.image.url }}" alt="{{ product.name }}" class="w-full h-40 object-cover rounded-lg mb-4" height="160" width="320">
                    <h3 class="text-xl font-semibold mb-2">{{ product.name }}</h3>
                    <p class="text-gray-600">{{ product.description }}</p>
                    <p class="text-lg font-bold text-gray-800">{{ product.price }} PKR</p>
                </div>
            {% endfor %}
        </div>
    </div>

<!-- FAQ Section -->
<section class="bg-white py-12">
    <h2 class="text-3xl font-bold mb-6 text-center text-blue-600">Frequently Asked Questions</h2>
    <div class="max-w-4xl mx-auto">
        <div class="mb-6">
            <h3 class="text-xl font-semibold text-gray-800">What is the return policy?</h3>
            <p class="text-gray-600">We offer a 30-day return policy on all phones. For more details, check our Return & Refund page.</p>
        </div>
        <div class="mb-6">
            <h3 class="text-xl font-semibold text-gray-800">Do you offer warranty on phones?</h3>
            <p class="text-gray-600">Yes, all our phones come with a 1-year warranty for defects or hardware issues.</p>
        </div>
        <div class="mb-6">
            <h3 class="text-xl font-semibold text-gray-800">How can I track my order?</h3>
            <p class="text-gray-600">Once your order is shipped, you will receive a tracking number via email.</p>
        </div>
    </div>
</section>

<!-- Newsletter Signup Section -->
<section class="bg-blue-600 text-white text-center py-12">
    <h2 class="text-3xl font-bold mb-4">Stay Updated!</h2>
    <p class="text-lg mb-6">Subscribe to our newsletter for the latest updates, offers, and more!</p>
    <form action="#" method="post" class="max-w-md mx-auto">
        <input type="email" placeholder="Enter your email" class="py-3 px-6 rounded-lg text-gray-700 w-2/3 mb-4" required>
        <button type="submit" class="bg-white text-blue-600 py-3 px-6 rounded-lg text-xl hover:bg-gray-100 transition-colors duration-300">Subscribe</button>
    </form>
</section>

<!-- Store Locations Section -->
<section class="bg-gray-50 py-12">
    <h2 class="text-3xl font-bold mb-6 text-center text-blue-600">Visit Our Stores</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div class="store-card bg-white rounded-lg shadow-lg p-6 text-center">
            <h3 class="text-xl font-semibold mb-2">Islamabad Store</h3>
            <p class="text-gray-600">123 Main Street, Islamabad</p>
            <p class="text-gray-500">Open: Mon-Sat, 10 AM - 7 PM</p>
        </div>
        <div class="store-card bg-white rounded-lg shadow-lg p-6 text-center">
            <h3 class="text-xl font-semibold mb-2">Lahore Store</h3>
            <p class="text-gray-600">456 Liberty Market, Lahore</p>
            <p class="text-gray-500">Open: Mon-Sat, 10 AM - 7 PM</p>
        </div>
        <div class="store-card bg-white rounded-lg shadow-lg p-6 text-center">
            <h3 class="text-xl font-semibold mb-2">Karachi Store</h3>
            <p class="text-gray-600">789 Karachi Plaza, Karachi</p>
            <p class="text-gray-500">Open: Mon-Sat, 10 AM - 7 PM</p>
        </div>
    </div>
</section>

<!-- Social Media Section -->
<section class="bg-blue-600 text-white text-center py-12">
    <h2 class="text-3xl font-bold mb-4">Follow Us</h2>
    <p class="text-lg mb-6">Stay connected for the latest updates and promotions!</p>
    <div class="flex justify-center gap-6">
        <a href="#" class="text-2xl hover:text-gray-200"><i class="fab fa-facebook"></i></a>
        <a href="#" class="text-2xl hover:text-gray-200"><i class="fab fa-twitter"></i></a>
        <a href="#" class="text-2xl hover:text-gray-200"><i class="fab fa-instagram"></i></a>
        <a href="#" class="text-2xl hover:text-gray-200"><i class="fab fa-youtube"></i></a>
    </div>
</section>

{% endblock content %}


├── laptops.html
{% extends 'base.html' %}
{% load static %}
{% block content %}
<section class="mb-12">
    <h2 class="text-3xl font-bold mb-6 text-center text-gray-900">Available Laptops</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {% for laptop in laptops %}
        <div class="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
            <!-- Check if images exist, then display the first one -->
            {% if laptop.images.first %}
                <img src="{{ laptop.images.first.image.url }}" alt="{{ laptop.name }}" class="w-full h-60 object-contain bg-gray-100 transition-transform duration-300 hover:scale-105">
            {% else %}
                <img src="{% static 'default_image.jpg' %}" alt="Default Image" class="w-full h-60 object-contain bg-gray-100 transition-transform duration-300 hover:scale-105">
            {% endif %}
            <div class="p-6">
                <h3 class="text-2xl font-semibold text-gray-900 mb-2">{{ laptop.name }}</h3>
                <p class="text-gray-600 mb-4">{{ laptop.description|truncatewords:10 }}</p>
                <div class="flex justify-between items-center">
                    <p class="font-bold text-lg text-indigo-600">PKR {{ laptop.price }}</p>
                    <a href="{% url 'laptop_detail' laptop.slug %}" class="bg-indigo-600 text-white py-2 px-4 rounded-xl hover:bg-indigo-700 transition-colors duration-300">
                        View Details
                    </a>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</section>
{% endblock %}


├── laptop_detail.html
{% extends 'base.html' %} {% block content %}
<div class="container mx-auto p-6">
  <!-- Main Product Card -->
  <div
    class="bg-white rounded-2xl shadow-xl overflow-hidden transition-shadow hover:shadow-2xl"
  >
    <div class="flex flex-col lg:flex-row">
      <!-- Image Gallery Section -->
      <div class="lg:w-1/2 p-8 bg-gray-50">
        <div class="relative w-full h-[500px] mb-6">
          <img
            id="previewImage"
            src="{{ laptop.images.first.image.url }}"
            alt="{{ laptop.name }}"
            class="w-full h-full object-contain rounded-xl shadow-md transition-transform duration-300 hover:scale-105"
          />
        </div>
        <!-- Thumbnail Gallery -->
        <div class="mt-6 grid grid-cols-4 gap-4">
          {% for image in laptop.images.all %}
          <div
            class="aspect-square overflow-hidden rounded-lg border-2 border-gray-200 hover:border-indigo-500 transition-all duration-300 transform hover:scale-105"
          >
            <img
              src="{{ image.image.url }}"
              alt="Image for {{ laptop.name }}"
              class="w-full h-full object-contain cursor-pointer"
              onmouseover="updatePreview('{{ image.image.url }}')"
            />
          </div>
          {% endfor %}
        </div>
      </div>

      <!-- Product Details Section -->
      <div class="lg:w-1/2 p-8 lg:pl-12 flex flex-col">
        <h1 class="text-4xl font-bold text-gray-900 mb-4 leading-tight">
          {{ laptop.name }}
        </h1>
        <p class="text-lg text-gray-600 mb-8 leading-relaxed">
          {{ laptop.description }}
        </p>

        <!-- Price Tag -->
        <div class="bg-indigo-50 p-4 rounded-xl mb-8">
          <div class="flex items-center justify-between">
            <span class="text-lg font-semibold text-gray-700">Price</span>
            <span class="text-3xl font-bold text-indigo-600"
              >PKR {{ laptop.price }}</span
            >
          </div>
        </div>

        <!-- Specifications Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div class="bg-gray-50 p-4 rounded-xl">
            <span class="text-sm text-gray-500">Processor</span>
            <p class="text-lg font-semibold text-gray-800">
              {{ laptop.processor }}
            </p>
          </div>
          <div class="bg-gray-50 p-4 rounded-xl">
            <span class="text-sm text-gray-500">RAM</span>
            <p class="text-lg font-semibold text-gray-800">{{ laptop.ram }}</p>
          </div>
          <div class="bg-gray-50 p-4 rounded-xl">
            <span class="text-sm text-gray-500">Storage</span>
            <p class="text-lg font-semibold text-gray-800">
              {{ laptop.storage }}
            </p>
          </div>
          <div class="bg-gray-50 p-4 rounded-xl">
            <span class="text-sm text-gray-500">Display</span>
            <p class="text-lg font-semibold text-gray-800">
              {{ laptop.display }}
            </p>
          </div>
          <div class="bg-gray-50 p-4 rounded-xl">
            <span class="text-sm text-gray-500">Battery</span>
            <p class="text-lg font-semibold text-gray-800">
              {{ laptop.battery }}
            </p>
          </div>
          <div class="bg-gray-50 p-4 rounded-xl">
            <span class="text-sm text-gray-500">Operating System</span>
            <p class="text-lg font-semibold text-gray-800">{{ laptop.os }}</p>
          </div>
        </div>

        <!-- Add to Cart Button -->
        <button
          class="w-full bg-indigo-600 text-white py-4 px-8 rounded-xl text-lg font-semibold hover:bg-indigo-700 transform transition-all duration-300 hover:scale-[1.02] focus:outline-none focus:ring-4 focus:ring-indigo-200"
        >
          Add to Cart
        </button>
      </div>
    </div>
  </div>

  <!-- Reviews Section -->
  <div class="mt-16">
    <h3 class="text-3xl font-bold mb-8 text-gray-900">Customer Reviews</h3>
    {% if reviews %}
    <div class="grid gap-6">
      {% for review in reviews %}
      <div
        class="bg-white rounded-xl shadow-md p-6 transition-all duration-300 hover:shadow-lg"
      >
        <div class="flex justify-between items-center mb-4">
          <div class="flex items-center space-x-4">
            <div
              class="w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center"
            >
              <span class="text-xl font-bold text-indigo-600"
                >{{ review.user.username|make_list|first }}</span
              >
            </div>
            <div>
              <h4 class="font-semibold text-gray-900">
                {{ review.user.username }}
              </h4>
              <p class="text-sm text-gray-500">
                {{ review.created_at|date:"D M d, Y" }}
              </p>
            </div>
          </div>
          <div class="flex">
            {% for i in rating_range %}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              fill="{% if i <= review.rating %}#FCD34D{% else %}#E5E7EB{% endif %}"
              class="mr-1"
              viewBox="0 0 16 16"
            >
              <path
                d="M3.612 15.443c-.396.217-.878-.115-.786-.545l1.135-4.442L.173 6.545c-.39-.38-.188-1.031.35-1.092l4.511-.335L7.9.473c.216-.611.962-.611 1.178 0l2.285 4.64 4.505.335c.538.061.738.712.348 1.092l-3.788 4.411 1.128 4.442c.092.43-.39.762-.786.545l-4.43-2.586-4.43 2.586z"
              />
            </svg>
            {% endfor %}
          </div>
        </div>
        <p class="text-gray-700 leading-relaxed">{{ review.review_text }}</p>
      </div>
      {% endfor %}
    </div>
    {% else %}
    <div class="bg-gray-50 rounded-xl p-8 text-center">
      <p class="text-gray-600 text-lg">
        No reviews yet. Be the first to share your experience!
      </p>
    </div>
    {% endif %}
  </div>

  <!-- Add Review Form -->
  <div class="mt-16 mb-8">
    <h4 class="text-2xl font-bold mb-6 text-gray-900">Write a Review</h4>
    <form method="post" class="bg-white rounded-xl shadow-lg p-8">
      {% csrf_token %}
      <div class="space-y-6">
        <div>
          <label
            for="rating"
            class="block text-lg font-medium text-gray-700 mb-4"
            >Rating</label
          >
          <div class="flex space-x-4">
            {% for i in rating_range %}
            <label class="relative">
              <input type="radio" name="rating" value="{{ i }}" class="hidden
              peer" {% if form.rating.value == i %}checked{% endif %}>
              <div
                class="w-12 h-12 flex items-center justify-center rounded-lg border-2 border-gray-200 cursor-pointer peer-checked:border-indigo-500 peer-checked:bg-indigo-50"
              >
                <span
                  class="text-xl font-semibold text-gray-700 peer-checked:text-indigo-600"
                  >{{ i }}</span
                >
              </div>
            </label>
            {% endfor %}
          </div>
        </div>

        <div>
          <label
            for="review-text"
            class="block text-lg font-medium text-gray-700 mb-2"
            >Your Review</label
          >
          <textarea
            name="review_text"
            id="review-text"
            rows="4"
            class="w-full border-2 border-gray-200 rounded-xl p-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
            placeholder="Share your experience with this product..."
          ></textarea>
        </div>

        <button
          type="submit"
          class="w-full bg-indigo-600 text-white py-4 px-8 rounded-xl text-lg font-semibold hover:bg-indigo-700 transform transition-all duration-300 hover:scale-[1.02] focus:outline-none focus:ring-4 focus:ring-indigo-200"
        >
          Submit Review
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  function updatePreview(imageUrl) {
    const previewImage = document.getElementById("previewImage");
    previewImage.src = imageUrl;

    // Add fade effect
    previewImage.style.opacity = "0";
    setTimeout(() => {
      previewImage.style.opacity = "1";
    }, 100);
  }

  // Initialize preview image transition
  const previewImage = document.getElementById("previewImage");
  previewImage.style.transition = "all 0.3s ease-in-out";
</script>
{% endblock %}


├── phones.html
{% extends 'base.html' %}
{% load static %}
{% block content %}
<!-- Featured Phones Section -->
<section id="phones" class="mb-12">
    <h2 class="text-3xl font-bold mb-6 text-center text-gray-900">Available Phones</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {% for phone in phones %}
        <div class="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
            <!-- Check if images exist, then display the first one -->
            {% if phone.images.first %}
                <img src="{{ phone.images.first.image.url }}" alt="{{ phone.name }}" class="w-full h-60 object-contain bg-gray-100 transition-transform duration-300 hover:scale-105">
            {% else %}
                <img src="{% static 'default_image.jpg' %}" alt="Default Image" class="w-full h-60 object-contain bg-gray-100 transition-transform duration-300 hover:scale-105">
            {% endif %}
            <div class="p-6">
                <h3 class="text-2xl font-semibold text-gray-900 mb-2">{{ phone.name }}</h3>
                <p class="text-gray-600 mb-4">{{ phone.description|truncatewords:10 }}</p>
                <div class="flex justify-between items-center">
                    <p class="font-bold text-lg text-indigo-600">PKR {{ phone.price }}</p>
                    <a href="{% url 'phone_detail' phone.slug %}" class="bg-indigo-600 text-white py-2 px-4 rounded-xl hover:bg-indigo-700 transition-colors duration-300">
                        View Details
                    </a>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</section>
{% endblock %}


├── phone_detail.html

{% extends 'base.html' %}

{% block content %}
<div class="container mx-auto p-6">
    <!-- Main Product Card -->
    <div class="bg-white rounded-2xl shadow-xl overflow-hidden transition-shadow hover:shadow-2xl">
        <div class="flex flex-col lg:flex-row">
            <!-- Image Gallery Section -->
            <div class="lg:w-1/2 p-8 bg-gray-50">
                <div class="relative w-full h-[500px] mb-6">
                    <img id="previewImage" src="{{ phone.images.first.image.url }}" 
                         alt="{{ phone.name }}" 
                         class="w-full h-full object-contain rounded-xl shadow-md transition-transform duration-300 hover:scale-105">
                    <canvas id="zoomCanvas" class="absolute top-0 left-0 w-full h-full pointer-events-none rounded-xl"></canvas>
                </div>
                <!-- Thumbnail Gallery -->
                <div class="mt-6 grid grid-cols-4 gap-4">
                    {% for image in images %}
                    <div class="aspect-square overflow-hidden rounded-lg border-2 border-gray-200 hover:border-indigo-500 transition-all duration-300 transform hover:scale-105">
                        <img src="{{ image.image.url }}" 
                             alt="Image for {{ phone.name }}" 
                             class="w-full h-full object-contain cursor-pointer" 
                             onmouseover="updatePreview('{{ image.image.url }}')">
                    </div>
                    {% endfor %}
                </div>
            </div>

            <!-- Product Details Section -->
            <div class="lg:w-1/2 p-8 lg:pl-12 flex flex-col">
                <h1 class="text-4xl font-bold text-gray-900 mb-4 leading-tight">{{ phone.name }}</h1>
                <p class="text-lg text-gray-600 mb-8 leading-relaxed">{{ phone.description }}</p>
                
                <!-- Price Tag -->
                <div class="bg-green-50 p-4 rounded-xl mb-8">
                    <div class="flex items-center justify-between">
                        <span class="text-lg font-semibold text-gray-700">Price</span>
                        <span class="text-3xl font-bold text-green-600">PKR {{ phone.price }}</span>
                    </div>
                </div>

                <!-- Specifications Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Storage</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.storage }} GB</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">RAM</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.ram }} GB</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Battery</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.battery_capacity }} mAh</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Chipset</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.chipset }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Camera</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.camera }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Display</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.display }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">Operating System</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.os }}</p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-xl">
                        <span class="text-sm text-gray-500">SIM</span>
                        <p class="text-lg font-semibold text-gray-800">{{ phone.sim }}</p>
                    </div>
                </div>

                <!-- Features Badges -->
                <div class="flex flex-wrap gap-4 mb-8">
                    <div class="px-4 py-2 rounded-full {% if phone.pta_approved %}bg-green-100 text-green-800{% else %}bg-red-100 text-red-800{% endif %} font-medium">
                        PTA {% if phone.pta_approved %}Approved{% else %}Not Approved{% endif %}
                    </div>
                    <div class="px-4 py-2 rounded-full {% if phone.five_g_supported %}bg-blue-100 text-blue-800{% else %}bg-gray-100 text-gray-800{% endif %} font-medium">
                        {% if phone.five_g_supported %}5G Supported{% else %}4G{% endif %}
                    </div>
                </div>

                <!-- Add to Cart Button -->
                <button class="w-full bg-green-600 text-white py-4 px-8 rounded-xl text-lg font-semibold hover:bg-green-700 transform transition-all duration-300 hover:scale-[1.02] focus:outline-none focus:ring-4 focus:ring-green-200">
                    Add to Cart
                </button>
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="mt-16">
        <h3 class="text-3xl font-bold mb-8 text-gray-900">Customer Reviews</h3>
        {% if reviews %}
        <div class="grid gap-6">
            {% for review in reviews %}
            <div class="bg-white rounded-xl shadow-md p-6 transition-all duration-300 hover:shadow-lg">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                            <span class="text-xl font-bold text-green-600">{{ review.user.username|make_list|first }}</span>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900">{{ review.user.username }}</h4>
                            <p class="text-sm text-gray-500">{{ review.created_at|date:"D M d, Y" }}</p>
                        </div>
                    </div>
                    <div class="flex">
                        {% for i in rating_range %}
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="{% if i <= review.rating %}#FCD34D{% else %}#E5E7EB{% endif %}" 
                             class="mr-1" viewBox="0 0 16 16">
                            <path d="M3.612 15.443c-.396.217-.878-.115-.786-.545l1.135-4.442L.173 6.545c-.39-.38-.188-1.031.35-1.092l4.511-.335L7.9.473c.216-.611.962-.611 1.178 0l2.285 4.64 4.505.335c.538.061.738.712.348 1.092l-3.788 4.411 1.128 4.442c.092.43-.39.762-.786.545l-4.43-2.586-4.43 2.586z"/>
                        </svg>
                        {% endfor %}
                    </div>
                </div>
                <p class="text-gray-700 leading-relaxed">{{ review.review_text }}</p>
            </div>
            {% endfor %}
        </div>
        {% else %}
        <div class="bg-gray-50 rounded-xl p-8 text-center">
            <p class="text-gray-600 text-lg">No reviews yet. Be the first to share your experience!</p>
        </div>
        {% endif %}
    </div>

    <!-- Add Review Form -->
    <div class="mt-16 mb-8">
        <h4 class="text-2xl font-bold mb-6 text-gray-900">Write a Review</h4>
        <form method="post" class="bg-white rounded-xl shadow-lg p-8">
            {% csrf_token %}
            <div class="space-y-6">
                <div>
                    <label for="rating" class="block text-lg font-medium text-gray-700 mb-4">Rating</label>
                    <div class="flex space-x-4">
                        {% for i in rating_range %}
                        <label class="relative">
                            <input type="radio" name="rating" value="{{ i }}" class="hidden peer" {% if form.rating.value == i %}checked{% endif %}>
                            <div class="w-12 h-12 flex items-center justify-center rounded-lg border-2 border-gray-200 cursor-pointer peer-checked:border-green-500 peer-checked:bg-green-50">
                                <span class="text-xl font-semibold text-gray-700 peer-checked:text-green-600">{{ i }}</span>
                            </div>
                        </label>
                        {% endfor %}
                    </div>
                </div>

                <div>
                    <label for="review-text" class="block text-lg font-medium text-gray-700 mb-2">Your Review</label>
                    <textarea name="review_text" id="review-text" rows="4" 
                              class="w-full border-2 border-gray-200 rounded-xl p-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                              placeholder="Share your experience with this product..."></textarea>
                </div>

                <button type="submit" 
                        class="w-full bg-green-600 text-white py-4 px-8 rounded-xl text-lg font-semibold hover:bg-green-700 transform transition-all duration-300 hover:scale-[1.02] focus:outline-none focus:ring-4 focus:ring-green-200">
                    Submit Review
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    function updatePreview(imageUrl) {
        const previewImage = document.getElementById('previewImage');
        previewImage.src = imageUrl;
        
        // Add fade effect
        previewImage.style.opacity = '0';
        setTimeout(() => {
            previewImage.style.opacity = '1';
        }, 100);
    }

    // Initialize preview image transition
    const previewImage = document.getElementById('previewImage');
    previewImage.style.transition = 'all 0.3s ease-in-out';

    // Zoom functionality
    const zoomCanvas = document.getElementById('zoomCanvas');
    const ctx = zoomCanvas.getContext('2d');

    previewImage.addEventListener('mousemove', (e) => {
        const rect = previewImage.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const zoomFactor = 2;
        const width = previewImage.width * zoomFactor;
        const height = previewImage.height * zoomFactor;
        const zoomX = (x / previewImage.width) * width - zoomCanvas.width / 2;
        const zoomY = (y / previewImage.height) * height - zoomCanvas.height / 2;

        ctx.clearRect(0, 0, zoomCanvas.width, zoomCanvas.height);
        ctx.drawImage(previewImage, zoomX, zoomY, width, height, 0, 0, zoomCanvas.width, zoomCanvas.height);
    });

    previewImage.onload = function() {
        zoomCanvas.width = previewImage.width;
        zoomCanvas.height = previewImage.height;
    };
</script>
{% endblock %}


├── registration
│   ├── login.html
│   ├── password_reset_confirm.html
│   ├── password_reset_email.html
│   ├── password_reset_form.html
│   └── signup.html
├── store
│   ├── orders.html
<!-- orders.html -->
{% extends "base.html" %}
{% load custom_filters %}
{% block content %}
<div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6">Your Orders</h1>

    {% if orders %}
        <div class="space-y-6">
            {% for order in orders %}
                <div class="bg-white rounded-lg shadow-lg overflow-hidden">
                    <div class="p-6">
                        <div class="flex justify-between items-start">
                            <div>
                                <h2 class="text-lg font-semibold mb-2">Order #{{ order.order_number }}</h2>
                                <p class="text-gray-600">Placed on {{ order.created_at|date:"F j, Y" }}</p>
                            </div>
                            <span class="px-4 py-2 rounded-full text-sm 
                                {% if order.status == 'Delivered' %}
                                    bg-green-100 text-green-800
                                {% elif order.status == 'Processing' %}
                                    bg-blue-100 text-blue-800
                                {% elif order.status == 'Cancelled' %}
                                    bg-red-100 text-red-800
                                {% else %}
                                    bg-gray-100 text-gray-800
                                {% endif %}
                            ">
                                {{ order.status }}
                            </span>
                        </div>

                        <div class="mt-6">
                            <h3 class="text-lg font-semibold mb-4">Items</h3>
                            <div class="space-y-4">
                                {% for item in order.items.all %}
                                    <div class="flex items-center space-x-4">
                                        <img src="{{ item.product.images.first.image.url }}" alt="{{ item.product.name }}" class="w-16 h-16 object-cover rounded" height="64" width="64">
                                        <div>
                                            <h4 class="font-medium">{{ item.product.name }}</h4>
                                            <p class="text-gray-600">Quantity: {{ item.quantity }}</p>
                                            <p class="text-gray-600">Price: PKR {{ item.price }}</p>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>

                        <div class="mt-6 border-t pt-6">
                            <div class="flex justify-between items-center">
                                <span class="font-semibold">Total Amount:</span>
                                <span class="text-xl font-bold">PKR {{ order.total_amount }}</span>
                            </div>
                            
                            <div class="mt-6 flex justify-end">
                                <a href="{% url 'order_detail' order.id %}" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-300">
                                    View Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="bg-white rounded-lg shadow-lg p-6 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            <h2 class="text-xl font-semibold mb-2">No Orders Yet</h2>
            <p class="text-gray-600 mb-6">Looks like you haven't placed any orders yet.</p>
            <a href="{% url 'phones' %}" class="inline-block bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-300">
                Start Shopping
            </a>
        </div>
    {% endif %}
</div>
{% endblock content %}


│   └── order_detail.html
{% extends "base.html" %}
{% load custom_filters %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Order #{{ order.order_number }}</h1>
                <p class="text-gray-600">Placed on {{ order.created_at|date:"F j, Y" }}</p>
            </div>
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                {% if order.status == 'Delivered' %}
                    bg-green-100 text-green-800
                {% elif order.status == 'Cancelled' %}
                    bg-red-100 text-red-800
                {% elif order.status == 'Shipped' %}
                    bg-blue-100 text-blue-800
                {% elif order.status == 'Processing' %}
                    bg-yellow-100 text-yellow-800
                {% else %}
                    bg-gray-100 text-gray-800
                {% endif %}">
                {{ order.status }}
            </span>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Order Items -->
        <div class="lg:col-span-2">
            <div class="bg-white shadow rounded-lg overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Order Items</h2>
                </div>
                <div class="divide-y divide-gray-200">
                    {% for item in order.items.all %}
                        <div class="p-6">
                            <div class="flex items-center">
                                {% if item.product.image %}
                                    <img src="{{ item.product.image.url }}" alt="{{ item.product.name }}" class="w-16 h-16 object-cover rounded" width="64" height="64">
                                {% else %}
                                    <div class="w-16 h-16 bg-gray-200 rounded"></div>
                                {% endif %}
                                <div class="ml-4 flex-1">
                                    <h3 class="text-sm font-medium text-gray-900">{{ item.product.name }}</h3>
                                    <p class="mt-1 text-sm text-gray-500">Quantity: {{ item.quantity }}</p>
                                    <p class="mt-1 text-sm text-gray-500">${{ item.price }} each</p>
                                </div>
                                <div class="text-right">
                                    <p class="text-sm font-medium text-gray-900">${{ item.price|multiply:item.quantity }}</p>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="lg:col-span-1">
            <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Order Summary</h2>
                </div>
                <div class="px-6 py-4">
                    <dl class="space-y-4">
                        <div class="flex justify-between">
                            <dt class="text-sm text-gray-600">Subtotal</dt>
                            <dd class="text-sm font-medium text-gray-900">${{ order.total_amount }}</dd>
                        </div>
                        <div class="flex justify-between">
                            <dt class="text-sm text-gray-600">Shipping</dt>
                            <dd class="text-sm font-medium text-gray-900">Free</dd>
                        </div>
                        <div class="border-t border-gray-200 pt-4 flex justify-between">
                            <dt class="text-base font-medium text-gray-900">Total</dt>
                            <dd class="text-base font-medium text-gray-900">${{ order.total_amount }}</dd>
                        </div>
                    </dl>
                </div>
            </div>

            <!-- Shipping Address -->
            <div class="mt-8 bg-white shadow rounded-lg">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Shipping Address</h2>
                </div>
                <div class="px-6 py-4">
                    <p class="text-sm text-gray-600 whitespace-pre-line">{{ order.shipping_address }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-8">
        <a href="{% url 'orders' %}" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            ← Back to Orders
        </a>
    </div>
</div>
{% endblock content %}

└── users
    ├── password_change.html
    ├── password_change_done.html
    └── profile.html
